<project name="JBoss Remoting 3" default="all">

    <property file="build.properties.local"/>
    <property file="build.properties"/>

    <!-- ============================================== -->
    <!-- LIBRARIES - Keep in alpha order by target name -->
    <!-- ============================================== -->

    <!-- External library: apiviz -->

    <target name="lib.apiviz-check">
        <available property="lib.apiviz.exists" file="${lib.apiviz.local}"/>
    </target>

    <target name="lib.apiviz" depends="lib.apiviz-check" unless="lib.apiviz.exists">
        <mkdir dir="${local.repository}/${lib.apiviz.dir}"/>
        <get src="${lib.apiviz.remote}" dest="${lib.apiviz.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.apiviz.license}.txt" dest="${lib.apiviz.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JAXB API -->

    <target name="lib.jaxb-api-check">
        <available property="lib.jaxb-api.exists" file="${lib.jaxb-api.local}"/>
    </target>

    <target name="lib.jaxb-api" depends="lib.jaxb-api-check" unless="lib.jaxb-api.exists">
        <mkdir dir="${local.repository}/${lib.jaxb-api.dir}"/>
        <get src="${lib.jaxb-api.remote}" dest="${lib.jaxb-api.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jaxb-api.license}.txt" dest="${lib.jaxb-api.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JBoss Common Core -->

    <target name="lib.jboss-common-core-check">
        <available property="lib.jboss-common-core.exists" file="${lib.jboss-common-core.local}"/>
    </target>

    <target name="lib.jboss-common-core" depends="lib.jboss-common-core-check" unless="lib.jboss-common-core.exists">
        <mkdir dir="${local.repository}/${lib.jboss-common-core.local-dir}"/>
        <get src="${lib.jboss-common-core.remote}" dest="${lib.jboss-common-core.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jboss-common-core.license}.txt" dest="${lib.jboss-common-core.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JBoss Common Logging SPI -->

    <target name="lib.jboss-common-logging-spi-check">
        <available property="lib.jboss-common-logging-spi.exists" file="${lib.jboss-common-logging-spi.local}"/>
    </target>

    <target name="lib.jboss-common-logging-spi" depends="lib.jboss-common-logging-spi-check" unless="lib.jboss-common-logging-spi.exists">
        <mkdir dir="${local.repository}/${lib.jboss-common-logging-spi.local-dir}"/>
        <get src="${lib.jboss-common-logging-spi.remote}" dest="${lib.jboss-common-logging-spi.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jboss-common-logging-spi.license}.txt" dest="${lib.jboss-common-logging-spi.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JBoss Microcontainer deployers SPI -->

    <target name="lib.jboss-deployers-spi-check">
        <available property="lib.jboss-deployers-spi.exists" file="${lib.jboss-deployers-spi.local}"/>
    </target>

    <target name="lib.jboss-deployers-spi" depends="lib.jboss-deployers-spi-check" unless="lib.jboss-deployers-spi.exists">
        <mkdir dir="${local.repository}/${lib.jboss-deployers.local-dir}"/>
        <get src="${lib.jboss-deployers-spi.remote}" dest="${lib.jboss-deployers-spi.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jboss-deployers-spi.license}.txt" dest="${lib.jboss-deployers-spi.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JBoss Microcontainer deployers structure SPI -->

    <target name="lib.jboss-deployers-structure-spi-check">
        <available property="lib.jboss-deployers-structure-spi.exists" file="${lib.jboss-deployers-structure-spi.local}"/>
    </target>

    <target name="lib.jboss-deployers-structure-spi" depends="lib.jboss-deployers-structure-spi-check" unless="lib.jboss-deployers-structure-spi.exists">
        <mkdir dir="${local.repository}/${lib.jboss-deployers.local-dir}"/>
        <get src="${lib.jboss-deployers-structure-spi.remote}" dest="${lib.jboss-deployers-structure-spi.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jboss-deployers-structure-spi.license}.txt" dest="${lib.jboss-deployers-structure-spi.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JBoss Microcontainer deployers core SPI -->

    <target name="lib.jboss-deployers-core-spi-check">
        <available property="lib.jboss-deployers-core-spi.exists" file="${lib.jboss-deployers-core-spi.local}"/>
    </target>

    <target name="lib.jboss-deployers-core-spi" depends="lib.jboss-deployers-core-spi-check" unless="lib.jboss-deployers-core-spi.exists">
        <mkdir dir="${local.repository}/${lib.jboss-deployers.local-dir}"/>
        <get src="${lib.jboss-deployers-core-spi.remote}" dest="${lib.jboss-deployers-core-spi.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jboss-deployers-core-spi.license}.txt" dest="${lib.jboss-deployers-core-spi.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JBoss Microcontainer kernel -->

    <target name="lib.jbossmc-kernel-check">
        <available property="lib.jbossmc-kernel.exists" file="${lib.jbossmc-kernel.local}"/>
    </target>

    <target name="lib.jbossmc-kernel" depends="lib.jbossmc-kernel-check" unless="lib.jbossmc-kernel.exists">
        <mkdir dir="${local.repository}/${lib.jbossmc.local-dir}"/>
        <get src="${lib.jbossmc-kernel.remote}" dest="${lib.jbossmc-kernel.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jbossmc-kernel.license}.txt" dest="${lib.jbossmc-kernel.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JBoss Microcontainer dependency -->

    <target name="lib.jbossmc-dependency-check">
        <available property="lib.jbossmc-dependency.exists" file="${lib.jbossmc-dependency.local}"/>
    </target>

    <target name="lib.jbossmc-dependency" depends="lib.jbossmc-dependency-check" unless="lib.jbossmc-dependency.exists">
        <mkdir dir="${local.repository}/${lib.jbossmc.local-dir}"/>
        <get src="${lib.jbossmc-dependency.remote}" dest="${lib.jbossmc-dependency.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jbossmc-dependency.license}.txt" dest="${lib.jbossmc-dependency.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JBoss Microcontainer managed -->

    <target name="lib.jboss-managed-check">
        <available property="lib.jboss-managed.exists" file="${lib.jboss-managed.local}"/>
    </target>

    <target name="lib.jboss-managed" depends="lib.jboss-managed-check" unless="lib.jboss-managed.exists">
        <mkdir dir="${local.repository}/${lib.jboss-managed.local-dir}"/>
        <get src="${lib.jboss-managed.remote}" dest="${lib.jboss-managed.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jboss-managed.license}.txt" dest="${lib.jboss-managed.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JBossXB -->

    <target name="lib.jbossxb-check">
        <available property="lib.jbossxb.exists" file="${lib.jbossxb.local}"/>
    </target>

    <target name="lib.jbossxb" depends="lib.jbossxb-check" unless="lib.jbossxb.exists">
        <mkdir dir="${local.repository}/${lib.jbossxb.dir}"/>
        <get src="${lib.jbossxb.remote}" dest="${lib.jbossxb.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jbossxb.license}.txt" dest="${lib.jbossxb.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JUnit -->

    <target name="lib.junit-check">
        <available property="lib.junit.exists" file="${lib.junit.local}"/>
    </target>

    <target name="lib.junit" depends="lib.junit-check" unless="lib.junit.exists">
        <mkdir dir="${local.repository}/${lib.junit.dir}"/>
        <get src="${lib.junit.remote}" dest="${lib.junit.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.junit.license}.txt" dest="${lib.junit.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: Marshalling API -->

    <target name="lib.marshalling-api-check">
        <available property="lib.marshalling-api.exists" file="${lib.marshalling-api.local}"/>
    </target>

    <target name="lib.marshalling-api" depends="lib.marshalling-api-check" unless="lib.marshalling-api.exists">
        <mkdir dir="${local.repository}/${lib.marshalling-api.dir}"/>
        <get src="${lib.marshalling-api.remote}" dest="${lib.marshalling-api.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.marshalling-api.license}.txt" dest="${lib.marshalling-api.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: River -->

    <target name="lib.river-check">
        <available property="lib.river.exists" file="${lib.river.local}"/>
    </target>

    <target name="lib.river" depends="lib.river-check" unless="lib.river.exists">
        <mkdir dir="${local.repository}/${lib.river.dir}"/>
        <get src="${lib.river.remote}" dest="${lib.river.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.river.license}.txt" dest="${lib.river.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: Servlet API 2.4 -->

    <target name="lib.servlet-check">
        <available property="lib.servlet.exists" file="${lib.servlet.local}"/>
    </target>

    <target name="lib.servlet" depends="lib.servlet-check" unless="lib.servlet.exists">
        <mkdir dir="${local.repository}/${lib.servlet.dir}"/>
        <get src="${lib.servlet.remote}" dest="${lib.servlet.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.servlet.license}.txt" dest="${lib.servlet.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: Sun embedded HTTP server -->

    <target name="lib.sun-httpserver-check">
        <available property="lib.sun-httpserver.exists" file="${lib.sun-httpserver.local}"/>
    </target>

    <target name="lib.sun-httpserver" depends="lib.sun-httpserver-check" unless="lib.sun-httpserver.exists">
        <mkdir dir="${local.repository}/${lib.sun-httpserver.dir}"/>
        <get src="${lib.sun-httpserver.remote}" dest="${lib.sun-httpserver.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.sun-httpserver.license}.txt" dest="${lib.sun-httpserver.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: XNIO api -->

    <target name="lib.xnio-api-check">
        <available property="lib.xnio-api.exists" file="${lib.xnio-api.local}"/>
    </target>

    <target name="lib.xnio-api" depends="lib.xnio-api-check" unless="lib.xnio-api.exists">
        <mkdir dir="${local.repository}/${lib.xnio-api.dir}"/>
        <get src="${lib.xnio-api.remote}" dest="${lib.xnio-api.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.xnio-api.license}.txt" dest="${lib.xnio-api.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: XNIO nio -->

    <target name="lib.xnio-nio-check">
        <available property="lib.xnio-nio.exists" file="${lib.xnio-nio.local}"/>
    </target>

    <target name="lib.xnio-nio" depends="lib.xnio-nio-check" unless="lib.xnio-nio.exists">
        <mkdir dir="${local.repository}/${lib.xnio-nio.dir}"/>
        <get src="${lib.xnio-nio.remote}" dest="${lib.xnio-nio.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.xnio-nio.license}.txt" dest="${lib.xnio-nio.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- ============================================== -->
    <!-- MODULES - Keep in alpha order by target name   -->
    <!-- ============================================== -->

    <!-- api module -->

    <target name="api.compile.depcheck">
        <mkdir dir="api/target/main"/>
        <uptodate property="api.compile.uptodate" targetfile="api/target/main/.lastcompile">
            <srcfiles dir="api/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="api.compile" depends="api.compile.depcheck" unless="api.compile.uptodate">
        <mkdir dir="api/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="api/src/main/java"
                destdir="api/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
                <path refid="util.classpath"/>
            </classpath>
        </javac>
        <touch file="api/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="api.test.compile.depcheck">
        <mkdir dir="api/target/test"/>
        <uptodate property="api.compile.uptodate" targetfile="api/target/test/.lastcompile">
            <srcfiles dir="api/src/test/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="api.test.compile" depends="lib.junit,api.compile,api.test.compile.depcheck" unless="api.test.compile.uptodate">
        <mkdir dir="api/target/test/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="api/src/test/java"
                destdir="api/target/test/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="testing-support.classpath"/>
                <pathelement location="${lib.junit.local}"/>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
        </javac>
        <touch file="api/target/test/.lastcompile" verbose="false"/>
    </target>

    <target name="api.test.pseudotarget">
        <echo message="============================================="/>
        <echo message="${message}"/>
        <echo message="============================================="/>
        <mkdir dir="api/target/test-results"/>
        <junit printsummary="true" fork="yes" includeantruntime="true">
            <sysproperty key="build.home" value="${basedir}"/>
            <sysproperty key="ant.library.dir" value="${ant.home}/lib"/>
            <sysproperty key="lib.junit.local" value="${lib.junit.local}"/>
            <sysproperty key="lib.marshalling-api.local" value="${lib.marshalling-api.local}"/>
            <sysproperty key="lib.xnio-api.local" value="${lib.xnio-api.local}"/>
            <jvmarg line="${test.jvmargs}"/>
            <formatter type="plain" extension="${extension}"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="testing-support.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="api/target/test/classes"/>
                <pathelement location="${lib.junit.local}"/>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
            <batchtest fork="yes" todir="api/target/test-results"
                       haltonfailure="no">
               <fileset dir="api/target/test/classes">
                   <include name="**/*TestCase.class"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="api.test" depends="api,testing-support,api.test.compile">
        <antcall inheritall="true" inheritrefs="true" target="api.test.pseudotarget">
            <param name="extension" value=".txt"/>
            <param name="message" value="Running with no security manager"/>
            <param name="test.jvmargs" value="-Ddummy=dummy"/>
        </antcall>
        <antcall inheritall="true" inheritrefs="true" target="api.test.pseudotarget">
            <param name="extension" value="-security.txt"/>
            <param name="message" value="Running with security manager"/>
            <param name="test.jvmargs" value="-Djava.security.manager=org.jboss.remoting.test.support.LoggingSecurityManager -Djava.security.policy=${basedir}/testing-support/src/main/resources/testing.policy"/>
        </antcall>
    </target>

    <target name="api.clean">
        <delete dir="api/target"/>
    </target>

    <target name="api" description="Build the API module" depends="lib.marshalling-api,lib.xnio-api,util,api.compile">
        <path id="api.classpath">
            <pathelement location="api/target/main/classes"/>
        </path>
    </target>

    <!-- compat module -->

    <target name="compat.compile.depcheck">
        <mkdir dir="compat/target/main"/>
        <uptodate property="compat.compile.uptodate" targetfile="compat/target/main/.lastcompile">
            <srcfiles dir="compat/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="compat.compile" depends="compat.compile.depcheck" unless="compat.compile.uptodate">
        <mkdir dir="compat/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="compat/src/main/java"
                destdir="compat/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="util.classpath"/>
            </classpath>
        </javac>
        <path id="compat.classpath">
            <pathelement location="compat/target/main/classes"/>
        </path>
        <touch file="compat/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="compat.clean">
        <delete dir="compat/target"/>
    </target>

    <target name="compat" description="Build the compat module" depends="api,util,compat.compile"/>

    <!-- core module -->

    <target name="core.compile.depcheck">
        <mkdir dir="core/target/main"/>
        <uptodate property="core.compile.uptodate" targetfile="core/target/main/.lastcompile">
            <srcfiles dir="core/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="core.compile" depends="core.compile.depcheck" unless="core.compile.uptodate">
        <mkdir dir="core/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="core/src/main/java"
                destdir="core/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="util.classpath"/>
                <path refid="version.classpath"/>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
        </javac>
        <touch file="core/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="core.test.compile.depcheck">
        <mkdir dir="core/target/test"/>
        <uptodate property="core.compile.uptodate" targetfile="core/target/test/.lastcompile">
            <srcfiles dir="core/src/test/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="core.test.compile" depends="lib.junit,core.compile,core.test.compile.depcheck" unless="core.test.compile.uptodate">
        <mkdir dir="core/target/test/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="core/src/test/java"
                destdir="core/target/test/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="util.classpath"/>
                <path refid="testing-support.classpath"/>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.junit.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
        </javac>
        <touch file="core/target/test/.lastcompile" verbose="false"/>
    </target>

    <target name="core.test.pseudotarget">
        <echo message="============================================="/>
        <echo message="${message}"/>
        <echo message="============================================="/>
        <mkdir dir="core/target/test-results"/>
        <junit printsummary="true" fork="yes" includeantruntime="true">
            <sysproperty key="build.home" value="${basedir}"/>
            <sysproperty key="ant.library.dir" value="${ant.home}/lib"/>
            <sysproperty key="lib.junit.local" value="${lib.junit.local}"/>
            <sysproperty key="lib.marshalling-api.local" value="${lib.marshalling-api.local}"/>
            <sysproperty key="lib.xnio-api.local" value="${lib.xnio-api.local}"/>
            <jvmarg line="${test.jvmargs}"/>
            <formatter type="plain" extension="${extension}"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="testing-support.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="core/target/test/classes"/>
                <pathelement location="${lib.junit.local}"/>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
            <batchtest fork="yes" todir="core/target/test-results"
                       haltonfailure="no">
               <fileset dir="core/target/test/classes">
                   <include name="**/*TestCase.class"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="core.test" depends="api,core,testing-support,util,core.test.compile">
        <antcall inheritall="true" inheritrefs="true" target="core.test.pseudotarget">
            <param name="extension" value=".txt"/>
            <param name="message" value="Running with no security manager"/>
            <param name="test.jvmargs" value="-Ddummy=dummy"/>
        </antcall>
        <antcall inheritall="true" inheritrefs="true" target="core.test.pseudotarget">
            <param name="extension" value="-security.txt"/>
            <param name="message" value="Running with security manager"/>
            <param name="test.jvmargs" value="-Djava.security.manager=org.jboss.remoting.test.support.LoggingSecurityManager -Djava.security.policy=${basedir}/testing-support/src/main/resources/testing.policy"/>
        </antcall>
    </target>

    <target name="core.clean">
        <delete dir="core/target"/>
    </target>

    <target name="core" description="Build the core module" depends="api,util,version,core.compile">
        <path id="core.classpath">
            <pathelement location="core/target/main/classes"/>
        </path>
    </target>

    <!-- mc-deployers module -->

    <target name="mc-deployers.compile.depcheck">
        <mkdir dir="mc-deployers/target/main"/>
        <uptodate property="mc-deployers.compile.uptodate" targetfile="mc-deployers/target/main/.lastcompile">
            <srcfiles dir="mc-deployers/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="mc-deployers.compile" depends="mc-deployers.compile.depcheck" unless="mc-deployers.compile.uptodate">
        <mkdir dir="mc-deployers/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="mc-deployers/src/main/java"
                destdir="mc-deployers/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="${lib.jaxb-api.local}"/>
                <pathelement location="${lib.jboss-common-logging-spi.local}"/>
                <pathelement location="${lib.jboss-common-core.local}"/>
                <pathelement location="${lib.jboss-deployers-core-spi.local}"/>
                <pathelement location="${lib.jboss-deployers-spi.local}"/>
                <pathelement location="${lib.jboss-deployers-structure-spi.local}"/>
                <pathelement location="${lib.jbossmc-kernel.local}"/>
                <pathelement location="${lib.jbossmc-dependency.local}"/>
                <pathelement location="${lib.jboss-managed.local}"/>
                <pathelement location="${lib.jbossxb.local}"/>
            </classpath>
        </javac>
        <touch file="mc-deployers/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="mc-deployers.clean">
        <delete dir="mc-deployers/target"/>
    </target>

    <target name="mc-deployers" description="Build the mc-deployers module" depends="lib.jaxb-api,lib.jboss-common-core,lib.jboss-common-logging-spi,lib.jboss-deployers-core-spi,lib.jboss-deployers-spi,lib.jboss-deployers-structure-spi,lib.jbossmc-kernel,lib.jbossmc-dependency,lib.jboss-managed,lib.jbossxb,api,core,util,mc-deployers.compile">
        <path id="mc-deployers.classpath">
            <pathelement location="mc-deployers/target/main/classes"/>
        </path>
    </target>

    <!-- protocol.multiplex module -->

    <target name="protocol.multiplex.compile.depcheck">
        <mkdir dir="protocol/multiplex/target/main"/>
        <uptodate property="protocol/multiplex.compile.uptodate" targetfile="protocol/multiplex/target/main/.lastcompile">
            <srcfiles dir="protocol/multiplex/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="protocol.multiplex.compile" depends="protocol.multiplex.compile.depcheck" unless="protocol.multiplex.compile.uptodate">
        <mkdir dir="protocol/multiplex/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="protocol/multiplex/src/main/java"
                destdir="protocol/multiplex/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
        </javac>
        <touch file="protocol/multiplex/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="protocol.multiplex.test.compile.depcheck">
        <mkdir dir="protocol/multiplex/target/test"/>
        <uptodate property="protocol.multiplex.compile.uptodate" targetfile="protocol/multiplex/target/test/.lastcompile">
            <srcfiles dir="protocol/multiplex/src/test/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="protocol.multiplex.test.compile" depends="lib.junit,protocol.multiplex.compile,protocol.multiplex.test.compile.depcheck" unless="protocol.multiplex.test.compile.uptodate">
        <mkdir dir="protocol/multiplex/target/test/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="protocol/multiplex/src/test/java"
                destdir="protocol/multiplex/target/test/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="protocol.multiplex.classpath"/>
                <path refid="util.classpath"/>
                <path refid="testing-support.classpath"/>
                <pathelement location="${lib.junit.local}"/>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.river.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
                <pathelement location="${lib.xnio-nio.local}"/>
            </classpath>
        </javac>
        <touch file="protocol/multiplex/target/test/.lastcompile" verbose="false"/>
    </target>

    <target name="protocol.multiplex.test.pseudotarget">
        <echo message="============================================="/>
        <echo message="${message}"/>
        <echo message="============================================="/>
        <mkdir dir="protocol/multiplex/target/test-results"/>
        <junit printsummary="true" fork="yes" includeantruntime="true">
            <sysproperty key="build.home" value="${basedir}"/>
            <sysproperty key="ant.library.dir" value="${ant.home}/lib"/>
            <sysproperty key="lib.junit.local" value="${lib.junit.local}"/>
            <sysproperty key="lib.marshalling-api.local" value="${lib.marshalling-api.local}"/>
            <sysproperty key="lib.river.local" value="${lib.river.local}"/>
            <sysproperty key="lib.xnio-api.local" value="${lib.xnio-api.local}"/>
            <sysproperty key="lib.xnio-nio.local" value="${lib.xnio-nio.local}"/>
            <jvmarg line="${test.jvmargs}"/>
            <formatter type="plain" extension="${extension}"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="protocol.multiplex.classpath"/>
                <path refid="testing-support.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="protocol/multiplex/target/test/classes"/>
                <pathelement location="${lib.junit.local}"/>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.river.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
                <pathelement location="${lib.xnio-nio.local}"/>
            </classpath>
            <batchtest fork="yes" todir="protocol/multiplex/target/test-results"
                       haltonfailure="no">
               <fileset dir="protocol/multiplex/target/test/classes">
                   <include name="**/*TestCase.class"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="protocol.multiplex.test" depends="lib.xnio-nio,api,core,protocol.multiplex,testing-support,util,protocol.multiplex.test.compile">
        <antcall inheritall="true" inheritrefs="true" target="protocol.multiplex.test.pseudotarget">
            <param name="extension" value=".txt"/>
            <param name="message" value="Running with no security manager"/>
            <param name="test.jvmargs" value="-Ddummy=dummy"/>
        </antcall>
        <antcall inheritall="true" inheritrefs="true" target="protocol.multiplex.test.pseudotarget">
            <param name="extension" value="-security.txt"/>
            <param name="message" value="Running with security manager"/>
            <param name="test.jvmargs" value="-Djava.security.manager=org.jboss.remoting.test.support.LoggingSecurityManager -Djava.security.policy=${basedir}/testing-support/src/main/resources/testing.policy -Dsecurity.debug=policy"/>
        </antcall>
    </target>

    <target name="protocol.multiplex.clean">
        <delete dir="protocol/multiplex/target"/>
    </target>

    <target name="protocol.multiplex" description="Build the protocol.multiplex module" depends="lib.xnio-api,api,core,util,protocol.multiplex.compile">
        <path id="protocol.multiplex.classpath">
            <pathelement location="protocol/multiplex/target/main/classes"/>
        </path>
    </target>

    <!-- protocol.basic module -->

    <target name="protocol.basic.compile.depcheck">
        <mkdir dir="protocol/basic/target/main"/>
        <uptodate property="protocol/basic.compile.uptodate" targetfile="protocol/basic/target/main/.lastcompile">
            <srcfiles dir="protocol/basic/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="protocol.basic.compile" depends="protocol.basic.compile.depcheck" unless="protocol.basic.compile.uptodate">
        <mkdir dir="protocol/basic/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="protocol/basic/src/main/java"
                destdir="protocol/basic/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
        </javac>
        <touch file="protocol/basic/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="protocol.basic.test.compile.depcheck">
        <mkdir dir="protocol/basic/target/test"/>
        <uptodate property="protocol.basic.compile.uptodate" targetfile="protocol/basic/target/test/.lastcompile">
            <srcfiles dir="protocol/basic/src/test/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="protocol.basic.test.compile" depends="lib.junit,protocol.basic.compile,protocol.basic.test.compile.depcheck" unless="protocol.basic.test.compile.uptodate">
        <mkdir dir="protocol/basic/target/test/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="protocol/basic/src/test/java"
                destdir="protocol/basic/target/test/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="protocol.basic.classpath"/>
                <path refid="standalone.classpath"/>
                <path refid="util.classpath"/>
                <path refid="testing-support.classpath"/>
                <pathelement location="${lib.junit.local}"/>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.river.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
                <pathelement location="${lib.xnio-nio.local}"/>
            </classpath>
        </javac>
        <touch file="protocol/basic/target/test/.lastcompile" verbose="false"/>
    </target>

    <target name="protocol.basic.test.pseudotarget">
        <echo message="============================================="/>
        <echo message="${message}"/>
        <echo message="============================================="/>
        <mkdir dir="protocol/basic/target/test-results"/>
        <junit printsummary="true" fork="yes" includeantruntime="true">
            <sysproperty key="build.home" value="${basedir}"/>
            <sysproperty key="ant.library.dir" value="${ant.home}/lib"/>
            <sysproperty key="lib.junit.local" value="${lib.junit.local}"/>
            <sysproperty key="lib.marshalling-api.local" value="${lib.marshalling-api.local}"/>
            <sysproperty key="lib.river.local" value="${lib.river.local}"/>
            <sysproperty key="lib.xnio-api.local" value="${lib.xnio-api.local}"/>
            <sysproperty key="lib.xnio-nio.local" value="${lib.xnio-nio.local}"/>
            <jvmarg line="${test.jvmargs}"/>
            <formatter type="plain" extension="${extension}"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="protocol.basic.classpath"/>
                <path refid="standalone.classpath"/>
                <path refid="testing-support.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="protocol/basic/target/test/classes"/>
                <pathelement location="${lib.junit.local}"/>
                <pathelement location="${lib.marshalling-api.local}"/>
                <pathelement location="${lib.river.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
                <pathelement location="${lib.xnio-nio.local}"/>
            </classpath>
            <batchtest fork="yes" todir="protocol/basic/target/test-results"
                       haltonfailure="no">
               <fileset dir="protocol/basic/target/test/classes">
                   <include name="**/*TestCase.class"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="protocol.basic.test" depends="lib.river,lib.xnio-nio,api,core,protocol.basic,standalone,testing-support,util,protocol.basic.test.compile">
        <antcall inheritall="true" inheritrefs="true" target="protocol.basic.test.pseudotarget">
            <param name="extension" value=".txt"/>
            <param name="message" value="Running with no security manager"/>
            <param name="test.jvmargs" value="-Ddummy=dummy"/>
        </antcall>
        <antcall inheritall="true" inheritrefs="true" target="protocol.basic.test.pseudotarget">
            <param name="extension" value="-security.txt"/>
            <param name="message" value="Running with security manager"/>
            <param name="test.jvmargs" value="-Djava.security.manager=org.jboss.remoting.test.support.LoggingSecurityManager -Djava.security.policy=${basedir}/testing-support/src/main/resources/testing.policy -Dsecurity.debug=policy"/>
        </antcall>
    </target>

    <target name="protocol.basic.clean">
        <delete dir="protocol/basic/target"/>
    </target>

    <target name="protocol.basic" description="Build the protocol.basic module" depends="lib.xnio-api,api,core,util,protocol.basic.compile">
        <path id="protocol.basic.classpath">
            <pathelement location="protocol/basic/target/main/classes"/>
        </path>
    </target>

    <!-- samples module -->

    <target name="samples.compile.depcheck">
        <mkdir dir="samples/target/main"/>
        <uptodate property="samples.compile.uptodate" targetfile="samples/target/main/.lastcompile">
            <srcfiles dir="samples/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="samples.compile" depends="samples.compile.depcheck" unless="samples.compile.uptodate">
        <mkdir dir="samples/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="samples/src/main/java"
                destdir="samples/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="standalone.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
        </javac>
        <touch file="samples/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="samples.clean">
        <delete dir="samples/target"/>
    </target>

    <target name="samples" description="Build the samples module" depends="api,standalone,util,samples.compile">
        <path id="samples.classpath">
            <pathelement location="samples/target/main/classes"/>
        </path>
    </target>

    <!-- standalone module -->

    <target name="standalone.compile.depcheck">
        <mkdir dir="standalone/target/main"/>
        <uptodate property="standalone.compile.uptodate" targetfile="standalone/target/main/.lastcompile">
            <srcfiles dir="standalone/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="standalone.compile" depends="standalone.compile.depcheck" unless="standalone.compile.uptodate">
        <mkdir dir="standalone/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="standalone/src/main/java"
                destdir="standalone/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
        </javac>
        <touch file="standalone/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="standalone.clean">
        <delete dir="standalone/target"/>
    </target>

    <target name="standalone" description="Build the standalone module" depends="lib.xnio-api,api,core,util,standalone.compile">
        <path id="standalone.classpath">
            <pathelement location="standalone/target/main/classes"/>
        </path>
    </target>

    <!-- testing-support module -->

    <target name="testing-support.compile.depcheck">
        <mkdir dir="testing-support/target/main"/>
        <uptodate property="testing-support.compile.uptodate" targetfile="testing-support/target/main/.lastcompile">
            <srcfiles dir="testing-support/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="testing-support.compile" depends="testing-support.compile.depcheck" unless="testing-support.compile.uptodate">
        <mkdir dir="testing-support/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="testing-support/src/main/java"
                destdir="testing-support/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${lib.junit.local}"/>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
        </javac>
        <touch file="testing-support/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="testing-support.clean">
        <delete dir="testing-support/target"/>
    </target>

    <target name="testing-support" description="Build the testing-support module" depends="lib.junit,lib.xnio-api,testing-support.compile">
        <path id="testing-support.classpath">
            <pathelement location="testing-support/target/main/classes"/>
        </path>
    </target>

    <!-- transporter module -->

    <target name="transporter.compile.depcheck">
        <mkdir dir="transporter/target/main"/>
        <uptodate property="transporter.compile.uptodate" targetfile="transporter/target/main/.lastcompile">
            <srcfiles dir="transporter/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="transporter.compile" depends="transporter.compile.depcheck" unless="transporter.compile.uptodate">
        <mkdir dir="transporter/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="transporter/src/main/java"
                destdir="transporter/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
        </javac>
        <touch file="transporter/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="transporter.clean">
        <delete dir="transporter/target"/>
    </target>

    <target name="transporter" description="Build the transporter module" depends="api,lib.xnio-api,transporter.compile">
        <path id="transporter.classpath">
            <pathelement location="transporter/target/main/classes"/>
        </path>
    </target>

    <!-- Utility module -->

    <target name="util.compile.depcheck">
        <mkdir dir="util/target/main"/>
        <uptodate property="util.compile.uptodate" targetfile="util/target/main/.lastcompile">
            <srcfiles dir="util/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="util.compile" depends="util.compile.depcheck" unless="util.compile.uptodate">
        <mkdir dir="util/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="util/src/main/java"
                destdir="util/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${lib.xnio-api.local}"/>
            </classpath>
        </javac>
        <touch file="util/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="util.clean">
        <delete dir="util/target"/>
    </target>

    <target name="util" description="Build the utilities module" depends="lib.xnio-api,util.compile">
        <path id="util.classpath">
            <pathelement location="util/target/main/classes"/>
        </path>
    </target>

    <!-- version module -->

    <target name="version.compile.depcheck">
        <mkdir dir="version/target/main"/>
        <uptodate property="version.compile.uptodate" targetfile="version/target/main/.lastcompile">
            <srcfiles dir="version/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="version.compile" depends="version.compile.depcheck" unless="version.compile.uptodate">
        <mkdir dir="version/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="version/src/main/java"
                destdir="version/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
        <touch file="version/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="version.clean">
        <delete dir="version/target"/>
    </target>

    <target name="version" description="Build the version module" depends="version.compile">
        <path id="version.classpath">
            <pathelement location="version/target/main/classes"/>
        </path>
        <java classpathref="version.classpath" classname="org.jboss.remoting.version.Version" outputproperty="version"/>
        <property name="version" value="UNKNOWN"/>
    </target>

    <!-- ============================================== -->
    <!-- JARS - Keep in alpha order by jar name         -->
    <!-- ============================================== -->

    <target name="api-jar" description="Build the API JAR" depends="api,transporter,util,version">
        <delete file="jboss-remoting-api.jar"/>
        <jar jarfile="jboss-remoting-api.jar">
            <manifest>
                <attribute name="Created-By" value="${java.vm.version} (${java.vm.vendor})"/>
                <attribute name="Specification-Title" value="JBoss Remoting"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss (http://www.jboss.org/)"/>
                <attribute name="Implementation-Title" value="JBoss Remoting (API)"/>
                <attribute name="Implementation-URL" value="http://labs.jboss.org/jbossremoting/"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Vendor-Id" value="http://www.jboss.org"/>
            </manifest>
            <zipfileset dir="api/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
            <zipfileset dir="transporter/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
            <zipfileset dir="util/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
        </jar>
    </target>

    <target name="core-jar" description="Build the Core JAR" depends="core,version">
        <delete file="jboss-remoting-core.jar"/>
        <jar jarfile="jboss-remoting-core.jar">
            <manifest>
                <attribute name="Created-By" value="${java.vm.version} (${java.vm.vendor})"/>
                <attribute name="Specification-Title" value="JBoss Remoting"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss (http://www.jboss.org/)"/>
                <attribute name="Implementation-Title" value="JBoss Remoting (Core)"/>
                <attribute name="Implementation-URL" value="http://labs.jboss.org/jbossremoting/"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Vendor-Id" value="http://www.jboss.org"/>
            </manifest>
            <zipfileset dir="core/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
            <zipfileset dir="version/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
        </jar>
    </target>

    <target name="standalone-jar" description="Build the standalone JAR" depends="api,core,standalone,transporter,util,version">
        <delete file="jboss-remoting-standalone.jar"/>
        <jar jarfile="jboss-remoting-standalone.jar">
            <manifest>
                <attribute name="Created-By" value="${java.vm.version} (${java.vm.vendor})"/>
                <attribute name="Specification-Title" value="JBoss Remoting"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss (http://www.jboss.org/)"/>
                <attribute name="Implementation-Title" value="JBoss Remoting - Standalone Version"/>
                <attribute name="Implementation-URL" value="http://labs.jboss.org/jbossremoting/"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Vendor-Id" value="http://www.jboss.org"/>
            </manifest>
            <zipfileset dir="api/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
            <zipfileset dir="core/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
            <zipfileset dir="standalone/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
            <zipfileset dir="transporter/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
            <zipfileset dir="util/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
        </jar>
    </target>

    <!-- ============================================== -->
    <!-- JAVADOCS                                       -->
    <!-- ============================================== -->

    <target name="api-javadoc" depends="api,core,standalone,util,lib.apiviz,lib.marshalling-api,lib.xnio-api">
        <delete dir="api/target/main/docs"/>
        <mkdir dir="api/target/main/docs"/>
        <javadoc destdir="api/target/main/docs" author="false" version="false" use="false" windowtitle="JBoss Remoting API">
            <doclet name="${lib.apiviz.doclet}" path="${lib.apiviz.local}"/>
            <packageset dir="api/src/main/java"/>
            <packageset dir="standalone/src/main/java"/>
            <packageset dir="transporter/src/main/java"/>
            <packageset dir="util/src/main/java"/>
            <doctitle><![CDATA[<h1>JBoss Remoting 3</h1>]]></doctitle>
            <bottom><![CDATA[<i>Copyright &#169; 2008 JBoss, a division of Red Hat, Inc.</i>]]></bottom>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
            <link href="http://docs.jboss.org/xnio/${lib.xnio.version-javadoc}/api/"/>
            <link href="http://docs.jboss.org/river/${lib.marshalling-api.version}/api/"/>
            <classpath>
                <path refid="core.classpath"/>
                <path refid="api.classpath"/>
                <path refid="standalone.classpath"/>
                <path refid="transporter.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="${lib.xnio-api.local}"/>
                <pathelement location="${lib.marshalling-api.local}"/>
            </classpath>
        </javadoc>
    </target>

    <!-- Default targets - keep depends in alpha order by category name -->
    <!-- These targets should explicitly list all modules, even if they will be built by other modules -->

    <!-- core -->

    <target name="all-core" description="Build all core targets" depends="api,compat,core,mc-deployers,protocol.basic,protocol.multiplex,samples,standalone,testing-support,transporter,util"/>

    <target name="clean-core" description="Clean all core targets" depends="api.clean,compat.clean,core.clean,mc-deployers.clean,protocol.basic.clean,protocol.multiplex.clean,samples.clean,standalone.clean,testing-support.clean,transporter.clean,util.clean"/>

    <!-- JARs: These should be the third-to-last targets in the file -->

    <target name="all-jars" description="Build all the JARs" depends="api-jar,core-jar,standalone-jar"/>

    <!-- fetch: These should be the second-to-last targets in the file -->

    <target name="all-fetch" description="Pre-fetch all external libraries" depends="lib.jboss-common-core,lib.jboss-common-logging-spi,lib.jboss-deployers-core-spi,lib.jboss-deployers-spi,lib.jboss-deployers-structure-spi,lib.jbossmc-kernel,lib.jboss-managed,lib.jbossxb,lib.marshalling-api,lib.servlet"/>

    <!-- all: These should be the last targets in the file -->

    <target name="all" description="Build everything" depends="all-core,all-jars,api-javadoc"/>

    <target name="clean" description="Clean out all build files" depends="clean-core,version.clean"/>

    <target name="test" description="Run all tests" depends="api.test,core.test,protocol.basic.test,protocol.multiplex.test"/>

</project>
