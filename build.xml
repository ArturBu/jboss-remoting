<project name="JBoss Remoting 3" default="all" xmlns:mvn="urn:maven-artifact-ant">

    <property file="build.properties.local"/>
    <property file="build.properties"/>

    <!-- ============================================== -->
    <!-- LIBRARIES - Keep in alpha order by target name -->
    <!-- ============================================== -->

    <property name="maven.ant.file" value="maven-ant-tasks.jar"/>

    <target name="jboss.repository" depends="maven-ant">
        <mvn:remoteRepository id="jboss.repository" url="http://repository.jboss.org/maven2"/>
    </target>

    <target name="maven-ant.check">
        <available property="maven-ant.exists" file="${maven.ant.file}"/>
    </target>

    <target name="maven-ant.fetch" depends="maven-ant.check" unless="maven-ant.exists">
        <get src="http://repository.jboss.org/maven2/org/apache/maven/maven-ant-tasks/2.0.9/maven-ant-tasks-2.0.9.jar" dest="${maven.ant.file}"/>
    </target>

    <target name="maven-ant" depends="maven-ant.fetch">
        <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
            <classpath>
                <pathelement location="${maven.ant.file}"/>
            </classpath>
        </typedef>
    </target>

    <!-- External library: apiviz -->

    <target name="lib.apiviz" depends="jboss.repository">
        <mvn:dependencies pathId="lib.apiviz.classpath">
            <mvn:remoteRepository refid="jboss.repository"/>
            <mvn:dependency groupId="org.jboss.apiviz" artifactId="apiviz" version="1.2.5.GA"/>
        </mvn:dependencies>
    </target>

    <!-- External library: JUnit -->

    <target name="lib.junit" depends="jboss.repository">
        <mvn:dependencies pathId="lib.junit.classpath">
            <mvn:remoteRepository refid="jboss.repository"/>
            <mvn:dependency groupId="junit" artifactId="junit" version="3.8.2"/>
        </mvn:dependencies>
        <property name="lib.junit.local" refid="lib.junit.classpath"/>
    </target>

    <!-- External library: Marshalling API -->

    <target name="lib.marshalling-api" depends="jboss.repository">
        <mvn:dependencies pathId="lib.marshalling-api.classpath">
            <mvn:remoteRepository refid="jboss.repository"/>
            <mvn:dependency groupId="org.jboss.marshalling" artifactId="marshalling-api" version="1.0.0.GA"/>
        </mvn:dependencies>
        <property name="lib.marshalling-api.local" refid="lib.marshalling-api.classpath"/>
    </target>

    <!-- External library: River -->

    <target name="lib.river" depends="jboss.repository">
        <mvn:dependencies pathId="lib.river.classpath">
            <mvn:remoteRepository refid="jboss.repository"/>
            <mvn:dependency groupId="org.jboss.marshalling" artifactId="river" version="1.0.0.GA"/>
        </mvn:dependencies>
        <property name="lib.river.local" refid="lib.river.classpath"/>
    </target>

    <!-- External library: XNIO api -->

    <target name="lib.xnio-api" depends="jboss.repository">
        <mvn:dependencies pathId="lib.xnio-api.classpath">
            <mvn:remoteRepository refid="jboss.repository"/>
            <mvn:dependency groupId="org.jboss.xnio" artifactId="xnio-api" version="1.2.0.GA"/>
        </mvn:dependencies>
        <property name="lib.xnio-api.local" refid="lib.xnio-api.classpath"/>
    </target>

    <!-- External library: XNIO nio -->

    <target name="lib.xnio-nio" depends="jboss.repository">
        <mvn:dependencies pathId="lib.xnio-nio.classpath">
            <mvn:remoteRepository refid="jboss.repository"/>
            <mvn:dependency groupId="org.jboss.xnio" artifactId="xnio-nio" version="1.2.0.GA"/>
        </mvn:dependencies>
        <property name="lib.xnio-nio.local" refid="lib.xnio-nio.classpath"/>
    </target>

    <!-- ============================================== -->
    <!-- MODULES - Keep in alpha order by target name   -->
    <!-- ============================================== -->

    <!-- api module -->

    <target name="api.compile.depcheck">
        <mkdir dir="api/target/main"/>
        <uptodate property="api.compile.uptodate" targetfile="api/target/main/.lastcompile">
            <srcfiles dir="api/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="api.compile" depends="api.compile.depcheck" unless="api.compile.uptodate">
        <mkdir dir="api/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="api/src/main/java"
                destdir="api/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="lib.marshalling-api.classpath"/>
                <path refid="lib.xnio-api.classpath"/>
            </classpath>
        </javac>
        <touch file="api/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="api.test.compile.depcheck">
        <mkdir dir="api/target/test"/>
        <uptodate property="api.compile.uptodate" targetfile="api/target/test/.lastcompile">
            <srcfiles dir="api/src/test/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="api.test.compile" depends="lib.junit,api.compile,api.test.compile.depcheck" unless="api.test.compile.uptodate">
        <mkdir dir="api/target/test/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="api/src/test/java"
                destdir="api/target/test/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="testing-support.classpath"/>
                <path refid="lib.junit.classpath"/>
            </classpath>
        </javac>
        <touch file="api/target/test/.lastcompile" verbose="false"/>
    </target>

    <target name="api.test.pseudotarget">
        <echo message="============================================="/>
        <echo message="${message}"/>
        <echo message="============================================="/>
        <mkdir dir="api/target/test-results"/>
        <junit printsummary="true" fork="yes" includeantruntime="true">
            <sysproperty key="build.home" value="${basedir}"/>
            <sysproperty key="ant.library.dir" value="${ant.home}/lib"/>
            <sysproperty key="lib.junit.local" value="${lib.junit.local}"/>
            <sysproperty key="lib.marshalling-api.local" value="${lib.marshalling-api.local}"/>
            <sysproperty key="lib.xnio-api.local" value="${lib.xnio-api.local}"/>
            <jvmarg line="${test.jvmargs}"/>
            <formatter type="plain" extension="${extension}"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="testing-support.classpath"/>
                <pathelement location="api/target/test/classes"/>
                <path refid="lib.junit.classpath"/>
            </classpath>
            <batchtest fork="yes" todir="api/target/test-results"
                       haltonfailure="no">
               <fileset dir="api/target/test/classes">
                   <include name="**/*TestCase.class"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="api.test" depends="api,testing-support,api.test.compile">
        <antcall inheritall="true" inheritrefs="true" target="api.test.pseudotarget">
            <param name="extension" value=".txt"/>
            <param name="message" value="Running with no security manager"/>
            <param name="test.jvmargs" value="-Ddummy=dummy"/>
        </antcall>
        <antcall inheritall="true" inheritrefs="true" target="api.test.pseudotarget">
            <param name="extension" value="-security.txt"/>
            <param name="message" value="Running with security manager"/>
            <param name="test.jvmargs" value="-Djava.security.manager=org.jboss.remoting.test.support.LoggingSecurityManager -Djava.security.policy=${basedir}/testing-support/src/main/resources/testing.policy"/>
        </antcall>
    </target>

    <target name="api.clean">
        <delete dir="api/target"/>
    </target>

    <target name="api" description="Build the API module" depends="lib.marshalling-api,lib.xnio-api,api.compile">
        <path id="api.classpath">
            <pathelement location="api/target/main/classes"/>
            <path refid="lib.xnio-api.classpath"/>
            <path refid="lib.marshalling-api.classpath"/>
        </path>
        <java classpathref="api.classpath" classname="org.jboss.remoting.Version" outputproperty="version"/>
        <property name="version" value="UNKNOWN"/>
    </target>

    <!-- core module -->

    <target name="core.compile.depcheck">
        <mkdir dir="core/target/main"/>
        <uptodate property="core.compile.uptodate" targetfile="core/target/main/.lastcompile">
            <srcfiles dir="core/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="core.compile" depends="core.compile.depcheck" unless="core.compile.uptodate">
        <mkdir dir="core/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="core/src/main/java"
                destdir="core/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
            </classpath>
        </javac>
        <touch file="core/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="core.test.compile.depcheck">
        <mkdir dir="core/target/test"/>
        <uptodate property="core.compile.uptodate" targetfile="core/target/test/.lastcompile">
            <srcfiles dir="core/src/test/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="core.test.compile" depends="lib.junit,core.compile,core.test.compile.depcheck" unless="core.test.compile.uptodate">
        <mkdir dir="core/target/test/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="core/src/test/java"
                destdir="core/target/test/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="testing-support.classpath"/>
                <pathelement location="${lib.junit.local}"/>
            </classpath>
        </javac>
        <touch file="core/target/test/.lastcompile" verbose="false"/>
    </target>

    <target name="core.test.pseudotarget">
        <echo message="============================================="/>
        <echo message="${message}"/>
        <echo message="============================================="/>
        <mkdir dir="core/target/test-results"/>
        <junit printsummary="true" fork="yes" includeantruntime="true">
            <sysproperty key="build.home" value="${basedir}"/>
            <sysproperty key="ant.library.dir" value="${ant.home}/lib"/>
            <sysproperty key="lib.junit.local" value="${lib.junit.local}"/>
            <sysproperty key="lib.marshalling-api.local" value="${lib.marshalling-api.local}"/>
            <sysproperty key="lib.xnio-api.local" value="${lib.xnio-api.local}"/>
            <jvmarg line="${test.jvmargs}"/>
            <formatter type="plain" extension="${extension}"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="testing-support.classpath"/>
                <pathelement location="core/target/test/classes"/>
                <path refid="lib.junit.classpath"/>
            </classpath>
            <batchtest fork="yes" todir="core/target/test-results"
                       haltonfailure="no">
               <fileset dir="core/target/test/classes">
                   <include name="**/*TestCase.class"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="core.test" depends="api,core,testing-support,core.test.compile">
        <antcall inheritall="true" inheritrefs="true" target="core.test.pseudotarget">
            <param name="extension" value=".txt"/>
            <param name="message" value="Running with no security manager"/>
            <param name="test.jvmargs" value="-Ddummy=dummy"/>
        </antcall>
        <antcall inheritall="true" inheritrefs="true" target="core.test.pseudotarget">
            <param name="extension" value="-security.txt"/>
            <param name="message" value="Running with security manager"/>
            <param name="test.jvmargs" value="-Djava.security.manager=org.jboss.remoting.test.support.LoggingSecurityManager -Djava.security.policy=${basedir}/testing-support/src/main/resources/testing.policy"/>
        </antcall>
    </target>

    <target name="core.clean">
        <delete dir="core/target"/>
    </target>

    <target name="core" description="Build the core module" depends="api,core.compile">
        <path id="core.classpath">
            <pathelement location="core/target/main/classes"/>
        </path>
    </target>

    <!-- protocol.multiplex module -->

    <target name="protocol.multiplex.compile.depcheck">
        <mkdir dir="protocol/multiplex/target/main"/>
        <uptodate property="protocol/multiplex.compile.uptodate" targetfile="protocol/multiplex/target/main/.lastcompile">
            <srcfiles dir="protocol/multiplex/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="protocol.multiplex.compile" depends="protocol.multiplex.compile.depcheck" unless="protocol.multiplex.compile.uptodate">
        <mkdir dir="protocol/multiplex/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="protocol/multiplex/src/main/java"
                destdir="protocol/multiplex/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
            </classpath>
        </javac>
        <touch file="protocol/multiplex/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="protocol.multiplex.test.compile.depcheck">
        <mkdir dir="protocol/multiplex/target/test"/>
        <uptodate property="protocol.multiplex.compile.uptodate" targetfile="protocol/multiplex/target/test/.lastcompile">
            <srcfiles dir="protocol/multiplex/src/test/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="protocol.multiplex.test.compile" depends="lib.junit,protocol.multiplex.compile,protocol.multiplex.test.compile.depcheck" unless="protocol.multiplex.test.compile.uptodate">
        <mkdir dir="protocol/multiplex/target/test/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="protocol/multiplex/src/test/java"
                destdir="protocol/multiplex/target/test/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="protocol.multiplex.classpath"/>
                <path refid="testing-support.classpath"/>
                <path refid="lib.junit.classpath"/>
                <path refid="lib.river.classpath"/>
                <path refid="lib.xnio-nio.classpath"/>
            </classpath>
        </javac>
        <touch file="protocol/multiplex/target/test/.lastcompile" verbose="false"/>
    </target>

    <target name="protocol.multiplex.test.pseudotarget">
        <echo message="============================================="/>
        <echo message="${message}"/>
        <echo message="============================================="/>
        <mkdir dir="protocol/multiplex/target/test-results"/>
        <junit printsummary="true" fork="yes" includeantruntime="true">
            <sysproperty key="build.home" value="${basedir}"/>
            <sysproperty key="ant.library.dir" value="${ant.home}/lib"/>
            <sysproperty key="lib.junit.local" value="${lib.junit.local}"/>
            <sysproperty key="lib.marshalling-api.local" value="${lib.marshalling-api.local}"/>
            <sysproperty key="lib.river.local" value="${lib.river.local}"/>
            <sysproperty key="lib.xnio-api.local" value="${lib.xnio-api.local}"/>
            <sysproperty key="lib.xnio-nio.local" value="${lib.xnio-nio.local}"/>
            <jvmarg line="${test.jvmargs}"/>
            <formatter type="plain" extension="${extension}"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="protocol.multiplex.classpath"/>
                <path refid="testing-support.classpath"/>
                <pathelement location="protocol/multiplex/target/test/classes"/>
                <path refid="lib.junit.classpath"/>
                <path refid="lib.river.classpath"/>
                <path refid="lib.xnio-nio.classpath"/>
            </classpath>
            <batchtest fork="yes" todir="protocol/multiplex/target/test-results"
                       haltonfailure="no">
               <fileset dir="protocol/multiplex/target/test/classes">
                   <include name="**/*TestCase.class"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="protocol.multiplex.test" depends="lib.xnio-nio,api,core,protocol.multiplex,testing-support,protocol.multiplex.test.compile">
        <antcall inheritall="true" inheritrefs="true" target="protocol.multiplex.test.pseudotarget">
            <param name="extension" value=".txt"/>
            <param name="message" value="Running with no security manager"/>
            <param name="test.jvmargs" value="-Ddummy=dummy"/>
        </antcall>
        <antcall inheritall="true" inheritrefs="true" target="protocol.multiplex.test.pseudotarget">
            <param name="extension" value="-security.txt"/>
            <param name="message" value="Running with security manager"/>
            <param name="test.jvmargs" value="-Djava.security.manager=org.jboss.remoting.test.support.LoggingSecurityManager -Djava.security.policy=${basedir}/testing-support/src/main/resources/testing.policy -Dsecurity.debug=policy"/>
        </antcall>
    </target>

    <target name="protocol.multiplex.clean">
        <delete dir="protocol/multiplex/target"/>
    </target>

    <target name="protocol.multiplex" description="Build the protocol.multiplex module" depends="lib.xnio-api,api,core,protocol.multiplex.compile">
        <path id="protocol.multiplex.classpath">
            <pathelement location="protocol/multiplex/target/main/classes"/>
        </path>
    </target>

    <!-- protocol.basic module -->

    <target name="protocol.basic.compile.depcheck">
        <mkdir dir="protocol/basic/target/main"/>
        <uptodate property="protocol/basic.compile.uptodate" targetfile="protocol/basic/target/main/.lastcompile">
            <srcfiles dir="protocol/basic/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="protocol.basic.compile" depends="protocol.basic.compile.depcheck" unless="protocol.basic.compile.uptodate">
        <mkdir dir="protocol/basic/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="protocol/basic/src/main/java"
                destdir="protocol/basic/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
            </classpath>
        </javac>
        <touch file="protocol/basic/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="protocol.basic.test.compile.depcheck">
        <mkdir dir="protocol/basic/target/test"/>
        <uptodate property="protocol.basic.compile.uptodate" targetfile="protocol/basic/target/test/.lastcompile">
            <srcfiles dir="protocol/basic/src/test/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="protocol.basic.test.compile" depends="lib.junit,protocol.basic.compile,protocol.basic.test.compile.depcheck" unless="protocol.basic.test.compile.uptodate">
        <mkdir dir="protocol/basic/target/test/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="protocol/basic/src/test/java"
                destdir="protocol/basic/target/test/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="protocol.basic.classpath"/>
                <path refid="testing-support.classpath"/>
                <path refid="lib.junit.classpath"/>
                <path refid="lib.river.classpath"/>
                <path refid="lib.xnio-nio.classpath"/>
            </classpath>
        </javac>
        <touch file="protocol/basic/target/test/.lastcompile" verbose="false"/>
    </target>

    <target name="protocol.basic.test.pseudotarget">
        <echo message="============================================="/>
        <echo message="${message}"/>
        <echo message="============================================="/>
        <mkdir dir="protocol/basic/target/test-results"/>
        <junit printsummary="true" fork="yes" includeantruntime="true">
            <sysproperty key="build.home" value="${basedir}"/>
            <sysproperty key="ant.library.dir" value="${ant.home}/lib"/>
            <sysproperty key="lib.junit.local" value="${lib.junit.local}"/>
            <sysproperty key="lib.marshalling-api.local" value="${lib.marshalling-api.local}"/>
            <sysproperty key="lib.river.local" value="${lib.river.local}"/>
            <sysproperty key="lib.xnio-api.local" value="${lib.xnio-api.local}"/>
            <sysproperty key="lib.xnio-nio.local" value="${lib.xnio-nio.local}"/>
            <jvmarg line="${test.jvmargs}"/>
            <formatter type="plain" extension="${extension}"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="core.classpath"/>
                <path refid="protocol.basic.classpath"/>
                <path refid="testing-support.classpath"/>
                <pathelement location="protocol/basic/target/test/classes"/>
                <path refid="lib.junit.classpath"/>
                <path refid="lib.river.classpath"/>
                <path refid="lib.xnio-nio.classpath"/>
            </classpath>
            <batchtest fork="yes" todir="protocol/basic/target/test-results"
                       haltonfailure="no">
               <fileset dir="protocol/basic/target/test/classes">
                   <include name="**/*TestCase.class"/>
               </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="protocol.basic.test" depends="lib.river,lib.xnio-nio,api,core,protocol.basic,testing-support,protocol.basic.test.compile">
        <antcall inheritall="true" inheritrefs="true" target="protocol.basic.test.pseudotarget">
            <param name="extension" value=".txt"/>
            <param name="message" value="Running with no security manager"/>
            <param name="test.jvmargs" value="-Ddummy=dummy"/>
        </antcall>
        <antcall inheritall="true" inheritrefs="true" target="protocol.basic.test.pseudotarget">
            <param name="extension" value="-security.txt"/>
            <param name="message" value="Running with security manager"/>
            <param name="test.jvmargs" value="-Djava.security.manager=org.jboss.remoting.test.support.LoggingSecurityManager -Djava.security.policy=${basedir}/testing-support/src/main/resources/testing.policy -Dsecurity.debug=policy"/>
        </antcall>
    </target>

    <target name="protocol.basic.clean">
        <delete dir="protocol/basic/target"/>
    </target>

    <target name="protocol.basic" description="Build the protocol.basic module" depends="lib.xnio-api,api,core,protocol.basic.compile">
        <path id="protocol.basic.classpath">
            <pathelement location="protocol/basic/target/main/classes"/>
        </path>
    </target>

    <!-- samples module -->

    <target name="samples.compile.depcheck">
        <mkdir dir="samples/target/main"/>
        <uptodate property="samples.compile.uptodate" targetfile="samples/target/main/.lastcompile">
            <srcfiles dir="samples/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="samples.compile" depends="samples.compile.depcheck" unless="samples.compile.uptodate">
        <mkdir dir="samples/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="samples/src/main/java"
                destdir="samples/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="protocol.multiplex.classpath"/>
                <path refid="lib.river.classpath"/>
            </classpath>
        </javac>
        <touch file="samples/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="samples.clean">
        <delete dir="samples/target"/>
    </target>

    <target name="samples" description="Build the samples module" depends="lib.marshalling-api,lib.river,api,protocol.multiplex,samples.compile">
        <path id="samples.classpath">
            <pathelement location="samples/target/main/classes"/>
        </path>
    </target>

    <!-- testing-support module -->

    <target name="testing-support.compile.depcheck">
        <mkdir dir="testing-support/target/main"/>
        <uptodate property="testing-support.compile.uptodate" targetfile="testing-support/target/main/.lastcompile">
            <srcfiles dir="testing-support/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="testing-support.compile" depends="testing-support.compile.depcheck" unless="testing-support.compile.uptodate">
        <mkdir dir="testing-support/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="testing-support/src/main/java"
                destdir="testing-support/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="lib.junit.classpath"/>
                <path refid="lib.xnio-api.classpath"/>
            </classpath>
        </javac>
        <touch file="testing-support/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="testing-support.clean">
        <delete dir="testing-support/target"/>
    </target>

    <target name="testing-support" description="Build the testing-support module" depends="lib.junit,lib.xnio-api,testing-support.compile">
        <path id="testing-support.classpath">
            <pathelement location="testing-support/target/main/classes"/>
        </path>
    </target>

    <!-- ============================================== -->
    <!-- JARS - Keep in alpha order by jar name         -->
    <!-- ============================================== -->

    <target name="api-jar" description="Build the API JAR" depends="api">
        <delete file="jboss-remoting-api.jar"/>
        <jar jarfile="jboss-remoting-api.jar">
            <manifest>
                <attribute name="Created-By" value="${java.vm.version} (${java.vm.vendor})"/>
                <attribute name="Specification-Title" value="JBoss Remoting"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss (http://www.jboss.org/)"/>
                <attribute name="Implementation-Title" value="JBoss Remoting (API)"/>
                <attribute name="Implementation-URL" value="http://labs.jboss.org/jbossremoting/"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Vendor-Id" value="http://www.jboss.org"/>
            </manifest>
            <zipfileset dir="api/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
        </jar>
    </target>

    <target name="api-source-jar" description="Build the API source JAR" depends="api">
        <delete file="jboss-remoting-api-source.jar"/>
        <jar jarfile="jboss-remoting-api-source.jar">
            <manifest>
                <attribute name="Created-By" value="${java.vm.version} (${java.vm.vendor})"/>
                <attribute name="Specification-Title" value="JBoss Remoting Source"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss (http://www.jboss.org/)"/>
                <attribute name="Implementation-Title" value="JBoss Remoting Source (API)"/>
                <attribute name="Implementation-URL" value="http://labs.jboss.org/jbossremoting/"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Vendor-Id" value="http://www.jboss.org"/>
            </manifest>
            <zipfileset dir="api/src/main/java">
                <include name="**/*.java"/>
            </zipfileset>
        </jar>
    </target>

    <target name="core-jar" description="Build the Core JAR" depends="core">
        <delete file="jboss-remoting-core.jar"/>
        <jar jarfile="jboss-remoting-core.jar">
            <manifest>
                <attribute name="Created-By" value="${java.vm.version} (${java.vm.vendor})"/>
                <attribute name="Specification-Title" value="JBoss Remoting"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss (http://www.jboss.org/)"/>
                <attribute name="Implementation-Title" value="JBoss Remoting (Core)"/>
                <attribute name="Implementation-URL" value="http://labs.jboss.org/jbossremoting/"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Vendor-Id" value="http://www.jboss.org"/>
            </manifest>
            <zipfileset dir="core/target/main/classes">
                <include name="**/*.class"/>
            </zipfileset>
        </jar>
    </target>

    <target name="core-source-jar" description="Build the Core source JAR" depends="core">
        <delete file="jboss-remoting-core-source.jar"/>
        <jar jarfile="jboss-remoting-core-source.jar">
            <manifest>
                <attribute name="Created-By" value="${java.vm.version} (${java.vm.vendor})"/>
                <attribute name="Specification-Title" value="JBoss Remoting Source"/>
                <attribute name="Specification-Version" value="${version}"/>
                <attribute name="Specification-Vendor" value="JBoss (http://www.jboss.org/)"/>
                <attribute name="Implementation-Title" value="JBoss Remoting Source (Core)"/>
                <attribute name="Implementation-URL" value="http://labs.jboss.org/jbossremoting/"/>
                <attribute name="Implementation-Version" value="${version}"/>
                <attribute name="Implementation-Vendor" value="JBoss, a division of Red Hat, Inc."/>
                <attribute name="Implementation-Vendor-Id" value="http://www.jboss.org"/>
            </manifest>
            <zipfileset dir="core/src/main/java">
                <include name="**/*.java"/>
            </zipfileset>
        </jar>
    </target>

    <!-- ============================================== -->
    <!-- JAVADOCS                                       -->
    <!-- ============================================== -->

    <target name="api-javadoc" description="Build the API JavaDoc" depends="api,core,lib.apiviz,lib.marshalling-api,lib.xnio-api">
        <delete dir="api/target/main/docs"/>
        <mkdir dir="api/target/main/docs"/>
        <javadoc destdir="api/target/main/docs" author="false" version="false" use="false" windowtitle="JBoss Remoting API">
            <doclet name="${lib.apiviz.doclet}" pathref="lib.apiviz.classpath"/>
            <packageset dir="api/src/main/java"/>
            <doctitle><![CDATA[<h1>JBoss Remoting, version ${version}</h1>]]></doctitle>
            <header><![CDATA[JBoss Remoting ${version}]]></header>
            <footer><![CDATA[JBoss Remoting ${version}]]></footer>
            <bottom><![CDATA[<i>Copyright &#169; 2008 JBoss, a division of Red Hat, Inc.</i>]]></bottom>
            <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
            <link href="http://docs.jboss.org/xnio/1.2.0.GA/api/"/>
            <link href="http://docs.jboss.org/river/1.0.0.GA/api/"/>
            <classpath>
                <path refid="core.classpath"/>
                <path refid="api.classpath"/>
            </classpath>
        </javadoc>
    </target>

    <target name="api-javadoc-zip" description="Build the API JavaDoc ZIP" depends="api-javadoc">
        <delete file="jboss-remoting-javadoc.zip"/>
        <zip zipfile="jboss-remoting-javadoc.zip">
            <zipfileset dir="api/target/main/docs" prefix="api">
                <include name="**/*.html"/>
                <include name="**/*.gif"/>
                <include name="**/*.png"/>
                <include name="**/package-list"/>
            </zipfileset>
        </zip>
    </target>

    <!-- ============================================== -->
    <!-- Distribution target                            -->
    <!-- ============================================== -->

    <target name="dist" description="Build distribution zip file" depends="api-jar,api-source-jar,api-javadoc-zip,core-jar,core-source-jar">
        <delete file="jboss-remoting.zip"/>
        <zip zipfile="jboss-remoting.zip">
            <zipfileset dir="${basedir}">
                <include name="COPYING.txt"/>
                <include name="jboss-remoting-api.jar"/>
                <include name="jboss-remoting-api-source.jar"/>
                <include name="jboss-remoting-core.jar"/>
                <include name="jboss-remoting-core-source.jar"/>
                <include name="jboss-remoting-javadoc.zip"/>
            </zipfileset>
        </zip>
    </target>

    <!-- Default targets - keep depends in alpha order by category name -->
    <!-- These targets should explicitly list all modules, even if they will be built by other modules -->

    <!-- core -->

    <target name="all-core" description="Build all core targets" depends="api,core,protocol.basic,protocol.multiplex,samples,testing-support"/>

    <!-- JARs: These should be the second-to-last targets in the file -->

    <target name="all-jars" description="Build all the JARs" depends="api-jar,core-jar"/>

    <!-- all: These should be the last targets in the file -->

    <target name="all" description="Build everything" depends="all-core,all-jars,api-javadoc"/>

    <target name="clean" description="Clean out all build files" depends="api.clean,core.clean,protocol.basic.clean,protocol.multiplex.clean,samples.clean,testing-support.clean"/>

    <target name="test" description="Run all tests" depends="api.test,core.test,protocol.basic.test,protocol.multiplex.test"/>

</project>
