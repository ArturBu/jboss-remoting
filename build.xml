<project name="JBoss Remoting 3" default="all">

    <property file="build.properties.local"/>
    <property file="build.properties"/>

    <!-- External library: MINA -->

    <target name="lib.mina-check">
        <available property="lib.mina.exists" file="${lib.mina.local}"/>
    </target>

    <target name="lib.mina" depends="lib.mina-check" unless="lib.mina.exists">
        <mkdir dir="${local.repository}/${lib.mina.dir}"/>
        <get src="${lib.mina.remote}" dest="${lib.mina.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.mina.license}.txt" dest="${lib.mina.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: JBoss Serialization -->

    <target name="lib.jboss-serialization-check">
        <available property="lib.jboss-serialization.exists" file="${lib.jboss-serialization.local}"/>
    </target>

    <target name="lib.jboss-serialization" depends="lib.trove,lib.jboss-serialization-check" unless="lib.jboss-serialization.exists">
        <mkdir dir="${local.repository}/${lib.jboss-serialization.dir}"/>
        <get src="${lib.jboss-serialization.remote}" dest="${lib.jboss-serialization.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.jboss-serialization.license}.txt" dest="${lib.jboss-serialization.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- Trove is used by JBoss Serialization -->

    <target name="lib.trove-check">
        <available property="lib.trove.exists" file="${lib.trove.local}"/>
    </target>

    <target name="lib.trove" depends="lib.trove-check" unless="lib.trove.exists">
        <mkdir dir="${local.repository}/${lib.trove.dir}"/>
        <get src="${lib.trove.remote}" dest="${lib.trove.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.trove.license}.txt" dest="${lib.trove.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- External library: Servlet API 2.4 -->

    <target name="lib.servlet-check">
        <available property="lib.servlet.exists" file="${lib.servlet.local}"/>
    </target>

    <target name="lib.servlet" depends="lib.servlet-check" unless="lib.servlet.exists">
        <mkdir dir="${local.repository}/${lib.servlet.dir}"/>
        <get src="${lib.servlet.remote}" dest="${lib.servlet.local}" usetimestamp="true" ignoreerrors="false"/>
        <get src="${remote.license.dir}/${lib.servlet.license}.txt" dest="${lib.servlet.local}.license.txt" usetimestamp="true" ignoreerrors="false"/>
    </target>

    <!-- api module -->

    <target name="api.compile.depcheck">
        <mkdir dir="api/target/main"/>
        <uptodate property="api.compile.uptodate" targetfile="api/target/main/.lastcompile">
            <srcfiles dir="api/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="api.compile" depends="api.compile.depcheck" unless="api.compile.uptodate">
        <mkdir dir="api/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="api/src/main/java"
                destdir="api/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="util.classpath"/>
            </classpath>
        </javac>
        <path id="api.classpath">
            <pathelement location="api/target/main/classes"/>
        </path>
        <touch file="api/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="api.clean">
        <delete dir="api/target"/>
    </target>

    <target name="api" description="Build the API module" depends="util,api.compile"/>

    <!-- Utility module -->

    <target name="util.compile.depcheck">
        <mkdir dir="util/target/main"/>
        <uptodate property="util.compile.uptodate" targetfile="util/target/main/.lastcompile">
            <srcfiles dir="util/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="util.compile" depends="util.compile.depcheck" unless="util.compile.uptodate">
        <mkdir dir="util/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="util/src/main/java"
                destdir="util/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
        <path id="util.classpath">
            <pathelement location="util/target/main/classes"/>
        </path>
        <touch file="util/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="util.clean">
        <delete dir="util/target"/>
    </target>

    <target name="util" description="Build the utilities module" depends="util.compile"/>

    <!-- sasl-null module -->

    <target name="sasl-null.compile.depcheck">
        <mkdir dir="sasl-null/target/main"/>
        <uptodate property="sasl-null.compile.uptodate" targetfile="sasl-null/target/main/.lastcompile">
            <srcfiles dir="sasl-null/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="sasl-null.compile" depends="sasl-null.compile.depcheck" unless="sasl-null.compile.uptodate">
        <mkdir dir="sasl-null/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="sasl-null/src/main/java"
                destdir="sasl-null/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
        <path id="sasl-null.classpath">
            <pathelement location="sasl-null/target/main/classes"/>
        </path>
        <touch file="sasl-null/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="sasl-null.clean">
        <delete dir="sasl-null/target"/>
    </target>

    <target name="sasl-null" description="Build the sasl-null module" depends="sasl-null.compile"/>

    <!-- srp module -->

    <target name="srp.compile.depcheck">
        <mkdir dir="srp/target/main"/>
        <uptodate property="srp.compile.uptodate" targetfile="srp/target/main/.lastcompile">
            <srcfiles dir="srp/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="srp.compile" depends="srp.compile.depcheck" unless="srp.compile.uptodate">
        <mkdir dir="srp/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="srp/src/main/java"
                destdir="srp/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="util.classpath"/>
            </classpath>
        </javac>
        <path id="srp.classpath">
            <pathelement location="srp/target/main/classes"/>
        </path>
        <touch file="srp/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="srp.clean">
        <delete dir="srp/target"/>
    </target>

    <target name="srp" description="Build the SRP SASL module" depends="util,srp.compile"/>

    <!-- core module -->

    <target name="core.compile.depcheck">
        <mkdir dir="core/target/main"/>
        <uptodate property="core.compile.uptodate" targetfile="core/target/main/.lastcompile">
            <srcfiles dir="core/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="core.compile" depends="core.compile.depcheck" unless="core.compile.uptodate">
        <mkdir dir="core/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="core/src/main/java"
                destdir="core/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="util.classpath"/>
                <path refid="api.classpath"/>
            </classpath>
        </javac>
        <path id="core.classpath">
            <pathelement location="core/target/main/classes"/>
        </path>
        <touch file="core/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="core.clean">
        <delete dir="core/target"/>
    </target>

    <target name="core" description="Build the core module" depends="api,util,core.compile"/>

    <!-- jrpp module -->

    <target name="jrpp.compile.depcheck">
        <mkdir dir="jrpp/target/main"/>
        <uptodate property="jrpp.compile.uptodate" targetfile="jrpp/target/main/.lastcompile">
            <srcfiles dir="jrpp/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="jrpp.compile" depends="jrpp.compile.depcheck" unless="jrpp.compile.uptodate">
        <mkdir dir="jrpp/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="jrpp/src/main/java"
                destdir="jrpp/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="mina-sasl.classpath"/>
                <path refid="util.classpath"/>
                <path refid="api.classpath"/>
                <pathelement location="${lib.mina.local}"/>
            </classpath>
        </javac>
        <path id="jrpp.classpath">
            <pathelement location="jrpp/target/main/classes"/>
        </path>
        <touch file="jrpp/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="jrpp.clean">
        <delete dir="jrpp/target"/>
    </target>

    <target name="jrpp" description="Build the jrpp module" depends="lib.mina,mina-sasl,util,api,jrpp.compile"/>

    <!-- http module -->

    <target name="http.compile.depcheck">
        <mkdir dir="http/target/main"/>
        <uptodate property="http.compile.uptodate" targetfile="http/target/main/.lastcompile">
            <srcfiles dir="http/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="http.compile" depends="http.compile.depcheck" unless="http.compile.uptodate">
        <mkdir dir="http/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="http/src/main/java"
                destdir="http/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="util.classpath"/>
            </classpath>
        </javac>
        <path id="http.classpath">
            <pathelement location="http/target/main/classes"/>
        </path>
        <touch file="http/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="http.clean">
        <delete dir="http/target"/>
    </target>

    <target name="http" description="Build the http module" depends="api,util,http.compile"/>

    <!-- http-mina-client module -->

    <target name="http-mina-client.compile.depcheck">
        <mkdir dir="http-mina-client/target/main"/>
        <uptodate property="http-mina-client.compile.uptodate" targetfile="http-mina-client/target/main/.lastcompile">
            <srcfiles dir="http-mina-client/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="http-mina-client.compile" depends="http-mina-client.compile.depcheck" unless="http-mina-client.compile.uptodate">
        <mkdir dir="http-mina-client/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="http-mina-client/src/main/java"
                destdir="http-mina-client/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="http.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="${lib.mina.local}"/>
            </classpath>
        </javac>
        <path id="http-mina-client.classpath">
            <pathelement location="http-mina-client/target/main/classes"/>
        </path>
        <touch file="http-mina-client/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="http-mina-client.clean">
        <delete dir="http-mina-client/target"/>
    </target>

    <target name="http-mina-client" description="Build the http-mina-client module" depends="api,http,util,http-mina-client.compile"/>

    <!-- http-mina-server module -->

    <target name="http-mina-server.compile.depcheck">
        <mkdir dir="http-mina-server/target/main"/>
        <uptodate property="http-mina-server.compile.uptodate" targetfile="http-mina-server/target/main/.lastcompile">
            <srcfiles dir="http-mina-server/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="http-mina-server.compile" depends="http-mina-server.compile.depcheck" unless="http-mina-server.compile.uptodate">
        <mkdir dir="http-mina-server/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="http-mina-server/src/main/java"
                destdir="http-mina-server/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="http.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="${lib.mina.local}"/>
            </classpath>
        </javac>
        <path id="http-mina-server.classpath">
            <pathelement location="http-mina-server/target/main/classes"/>
        </path>
        <touch file="http-mina-server/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="http-mina-server.clean">
        <delete dir="http-mina-server/target"/>
    </target>

    <target name="http-mina-server" description="Build the http-mina-server module" depends="api,http,util,http-mina-server.compile"/>

    <!-- http-se6 module -->

    <target name="http-se6.compile.depcheck">
        <mkdir dir="http-se6/target/main"/>
        <uptodate property="http-se6.compile.uptodate" targetfile="http-se6/target/main/.lastcompile">
            <srcfiles dir="http-se6/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
        <condition property="http-se6.compiler.newenough" else="false">
            <or>
                <contains string="${java.version}" substring="1.6."/>
                <contains string="${java.version}" substring="1.7."/>
            </or>
        </condition>
    </target>

    <target name="http-se6.compile" depends="http-se6.compile.depcheck" unless="http-se6.compile.uptodate" if="http-se6.compiler.newenough">
        <mkdir dir="http-se6/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="http-se6/src/main/java"
                destdir="http-se6/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="http.classpath"/>
                <path refid="util.classpath"/>
            </classpath>
        </javac>
        <path id="http-se6.classpath">
            <pathelement location="http-se6/target/main/classes"/>
        </path>
        <touch file="http-se6/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="http-se6.clean">
        <delete dir="http-se6/target"/>
    </target>

    <target name="http-se6" description="Build the http-se6 module" depends="api,http,util,http-se6.compile"/>

    <!-- http-urlconnection module -->

    <target name="http-urlconnection.compile.depcheck">
        <mkdir dir="http-urlconnection/target/main"/>
        <uptodate property="http-urlconnection.compile.uptodate" targetfile="http-urlconnection/target/main/.lastcompile">
            <srcfiles dir="http-urlconnection/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="http-urlconnection.compile" depends="http-urlconnection.compile.depcheck" unless="http-urlconnection.compile.uptodate">
        <mkdir dir="http-urlconnection/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="http-urlconnection/src/main/java"
                destdir="http-urlconnection/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="http.classpath"/>
                <path refid="util.classpath"/>
            </classpath>
        </javac>
        <path id="http-urlconnection.classpath">
            <pathelement location="http-urlconnection/target/main/classes"/>
        </path>
        <touch file="http-urlconnection/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="http-urlconnection.clean">
        <delete dir="http-urlconnection/target"/>
    </target>

    <target name="http-urlconnection" description="Build the http-urlconnection module" depends="api,http,util,http-urlconnection.compile"/>

    <!-- http-servlet module -->

    <target name="http-servlet.compile.depcheck">
        <mkdir dir="http-servlet/target/main"/>
        <uptodate property="http-servlet.compile.uptodate" targetfile="http-servlet/target/main/.lastcompile">
            <srcfiles dir="http-servlet/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="http-servlet.compile" depends="http-servlet.compile.depcheck" unless="http-servlet.compile.uptodate">
        <mkdir dir="http-servlet/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="http-servlet/src/main/java"
                destdir="http-servlet/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
                <path refid="http.classpath"/>
                <path refid="util.classpath"/>
                <pathelement location="${lib.servlet.local}"/>
            </classpath>
        </javac>
        <path id="http-servlet.classpath">
            <pathelement location="http-servlet/target/main/classes"/>
        </path>
        <touch file="http-servlet/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="http-servlet.clean">
        <delete dir="http-servlet/target"/>
    </target>

    <target name="http-servlet" description="Build the http-servlet module" depends="api,http,util,lib.servlet,http-servlet.compile"/>

    <!-- mina-sasl module -->

    <target name="mina-sasl.compile.depcheck">
        <mkdir dir="mina-sasl/target/main"/>
        <uptodate property="mina-sasl.compile.uptodate" targetfile="mina-sasl/target/main/.lastcompile">
            <srcfiles dir="mina-sasl/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="mina-sasl.compile" depends="mina-sasl.compile.depcheck" unless="mina-sasl.compile.uptodate">
        <mkdir dir="mina-sasl/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="mina-sasl/src/main/java"
                destdir="mina-sasl/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <pathelement location="${lib.mina.local}"/>
            </classpath>
        </javac>
        <path id="mina-sasl.classpath">
            <pathelement location="mina-sasl/target/main/classes"/>
        </path>
        <touch file="mina-sasl/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="mina-sasl.clean">
        <delete dir="mina-sasl/target"/>
    </target>

    <target name="mina-sasl" description="Build the mina-sasl module" depends="lib.mina,mina-sasl.compile"/>

    <!-- samples module -->

    <target name="samples.compile.depcheck">
        <mkdir dir="samples/target/main"/>
        <uptodate property="samples.compile.uptodate" targetfile="samples/target/main/.lastcompile">
            <srcfiles dir="samples/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="samples.compile" depends="samples.compile.depcheck" unless="samples.compile.uptodate">
        <mkdir dir="samples/target/main/classes"/>
        <javac
                source="${javac.source}"
                target="${javac.target}"
                srcdir="samples/src/main/java"
                destdir="samples/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="api.classpath"/>
            </classpath>
        </javac>
        <path id="samples.classpath">
            <pathelement location="samples/target/main/classes"/>
        </path>
        <touch file="samples/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="samples.clean">
        <delete dir="samples/target"/>
    </target>

    <target name="samples" description="Build the samples module" depends="api,samples.compile"/>

    <!-- tools module -->

    <target name="tools.compile.depcheck">
        <mkdir dir="tools/target/main"/>
        <uptodate property="tools.compile.uptodate" targetfile="tools/target/main/.lastcompile">
            <srcfiles dir="tools/src/main/java">
                <include name="**/"/>
                <include name="**/*.java"/>
                <exclude name="**/.*"/>
            </srcfiles>
        </uptodate>
        <condition property="tools.compiler.newenough" else="false">
            <or>
                <contains string="${java.version}" substring="1.6."/>
                <contains string="${java.version}" substring="1.7."/>
            </or>
        </condition>
    </target>

    <target name="tools.compile" depends="tools.compile.depcheck" unless="tools.compile.uptodate" if="tools.compiler.newenough">
        <mkdir dir="tools/target/main/classes"/>
        <javac
                source="1.6"
                target="1.6"
                srcdir="tools/src/main/java"
                destdir="tools/target/main/classes"
                debug="true">
            <compilerarg value="-Xlint:unchecked"/>
            <classpath>
                <path refid="srp.classpath"/>
                <path refid="util.classpath"/>
            </classpath>
        </javac>
        <path id="tools.classpath">
            <pathelement location="tools/target/main/classes"/>
        </path>
        <touch file="tools/target/main/.lastcompile" verbose="false"/>
    </target>

    <target name="tools.clean">
        <delete dir="tools/target"/>
    </target>

    <target name="tools" description="Build the tools module" depends="srp,util,tools.compile"/>

    <!-- Default targets -->

    <target name="all-http" description="Build all HTTP targets" depends="http,http-mina-client,http-mina-server,http-se6,http-servlet,http-urlconnection"/>

    <target name="all" description="Build everything" depends="api,core,http,http-mina-client,http-mina-server,http-se6,http-servlet,http-urlconnection,jrpp,samples,sasl-null,srp,tools,util"/>

    <target name="clean" description="Clean out all build files" depends="api.clean,core.clean,http.clean,http-mina-client.clean,http-mina-server.clean,http-se6.clean,http-servlet.clean,http-urlconnection.clean,jrpp.clean,mina-sasl.clean,samples.clean,sasl-null.clean,srp.clean,tools.clean,util.clean"/>

</project>
